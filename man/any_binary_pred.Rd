% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st-any.R
\name{any_binary_pred}
\alias{any_binary_pred}
\alias{st_any_intersects}
\alias{st_any_contains}
\alias{st_any_contains_properly}
\alias{st_any_covered_by}
\alias{st_any_covers}
\alias{st_any_crosses}
\alias{st_any_disjoint}
\alias{st_any_equals}
\alias{st_any_equals_exact}
\alias{st_any_is_within_distance}
\alias{st_any_overlaps}
\alias{st_any_touches}
\alias{st_any_within}
\title{Check for any occurences of \code{TRUE}}
\usage{
st_any_intersects(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_contains(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_contains_properly(
  x,
  y,
  at_least = 1L,
  at_most = Inf,
  match_crs = TRUE,
  ...
)

st_any_covered_by(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_covers(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_crosses(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_disjoint(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_equals(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_equals_exact(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_is_within_distance(
  x,
  y,
  at_least = 1L,
  at_most = Inf,
  match_crs = TRUE,
  ...
)

st_any_overlaps(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_touches(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)

st_any_within(x, y, at_least = 1L, at_most = Inf, match_crs = TRUE, ...)
}
\arguments{
\item{x}{object of class \code{sf}, \code{sfc} or \code{sfg}}

\item{y}{object of class \code{sf}, \code{sfc} or \code{sfg}; if missing, \code{x} is used}

\item{at_least}{(integer) Minimal occurences of \code{TRUE}.
Default is \code{1L}.}

\item{at_most}{(integer) Maximum occurences of \code{TRUE}.
Default is \code{Inf}.}

\item{match_crs}{(logical) Should the CRS of \code{y} be coerced to match
the CRS of \code{x}? Default is \code{TRUE}.}

\item{...}{(various) Arguments passed on to the underlying binary logical
operator.}
}
\description{
These functions wrap 'sf' binary logical operators with
a call to \code{>=} and \code{<=} -- verifying that a
minimamal and maximal number of occurences of \code{TRUE}
have been achieved.
}
\examples{
library(sf)
data(ngp)
data(states_map)

# Works like normal 'sf' binary logical
# operators, except it returns a vector.
i <- ngp \%>\%
  st_any_intersects(states_map)

head(i)
}
